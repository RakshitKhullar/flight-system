# Production Docker Compose Configuration

version: '3.8'

services:
  # Production travel-search-service configuration
  travel-search-service:
    environment:
      SPRING_PROFILES_ACTIVE: docker,prod
      JAVA_OPTS: "-Xmx1g -Xms512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
      LOGGING_LEVEL_COM_TRAVEL_SEARCH: INFO
      SPRING_JPA_SHOW_SQL: false
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # Production PostgreSQL with optimizations
  postgres:
    environment:
      POSTGRES_DB: flight_search_db_prod
      POSTGRES_USER: prod_user
      POSTGRES_PASSWORD: ${POSTGRES_PROD_PASSWORD}
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data

  # Production Redis with persistence and memory optimization
  redis:
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    volumes:
      - redis_prod_data:/data

  # Production Nginx with SSL
  nginx:
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Enable all monitoring services in production
  prometheus:
    profiles: []
    volumes:
      - prometheus_prod_data:/prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  grafana:
    profiles: []
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
    volumes:
      - grafana_prod_data:/var/lib/grafana
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local

networks:
  flight-search-network:
    driver: overlay
    attachable: true
